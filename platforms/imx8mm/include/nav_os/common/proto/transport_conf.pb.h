// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_conf.proto

#ifndef PROTOBUF_INCLUDED_transport_5fconf_2eproto
#define PROTOBUF_INCLUDED_transport_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5fconf_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5fconf_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_transport_5fconf_2eproto();
namespace xag_nav {
namespace os {
namespace proto {
class CommunicationMode;
class CommunicationModeDefaultTypeInternal;
extern CommunicationModeDefaultTypeInternal _CommunicationMode_default_instance_;
class ShmConf;
class ShmConfDefaultTypeInternal;
extern ShmConfDefaultTypeInternal _ShmConf_default_instance_;
class ShmMulticastLocator;
class ShmMulticastLocatorDefaultTypeInternal;
extern ShmMulticastLocatorDefaultTypeInternal _ShmMulticastLocator_default_instance_;
class TransportConf;
class TransportConfDefaultTypeInternal;
extern TransportConfDefaultTypeInternal _TransportConf_default_instance_;
}  // namespace proto
}  // namespace os
}  // namespace xag_nav
namespace google {
namespace protobuf {
template<> ::xag_nav::os::proto::CommunicationMode* Arena::CreateMaybeMessage<::xag_nav::os::proto::CommunicationMode>(Arena*);
template<> ::xag_nav::os::proto::ShmConf* Arena::CreateMaybeMessage<::xag_nav::os::proto::ShmConf>(Arena*);
template<> ::xag_nav::os::proto::ShmMulticastLocator* Arena::CreateMaybeMessage<::xag_nav::os::proto::ShmMulticastLocator>(Arena*);
template<> ::xag_nav::os::proto::TransportConf* Arena::CreateMaybeMessage<::xag_nav::os::proto::TransportConf>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace xag_nav {
namespace os {
namespace proto {

enum OptionalMode {
  HYBRID = 0,
  INTRA = 1,
  SHM = 2
};
bool OptionalMode_IsValid(int value);
const OptionalMode OptionalMode_MIN = HYBRID;
const OptionalMode OptionalMode_MAX = SHM;
const int OptionalMode_ARRAYSIZE = OptionalMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* OptionalMode_descriptor();
inline const ::std::string& OptionalMode_Name(OptionalMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    OptionalMode_descriptor(), value);
}
inline bool OptionalMode_Parse(
    const ::std::string& name, OptionalMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OptionalMode>(
    OptionalMode_descriptor(), name, value);
}
// ===================================================================

class ShmMulticastLocator final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xag_nav.os.proto.ShmMulticastLocator) */ {
 public:
  ShmMulticastLocator();
  virtual ~ShmMulticastLocator();

  ShmMulticastLocator(const ShmMulticastLocator& from);

  inline ShmMulticastLocator& operator=(const ShmMulticastLocator& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShmMulticastLocator(ShmMulticastLocator&& from) noexcept
    : ShmMulticastLocator() {
    *this = ::std::move(from);
  }

  inline ShmMulticastLocator& operator=(ShmMulticastLocator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ShmMulticastLocator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShmMulticastLocator* internal_default_instance() {
    return reinterpret_cast<const ShmMulticastLocator*>(
               &_ShmMulticastLocator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ShmMulticastLocator* other);
  friend void swap(ShmMulticastLocator& a, ShmMulticastLocator& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShmMulticastLocator* New() const final {
    return CreateMaybeMessage<ShmMulticastLocator>(nullptr);
  }

  ShmMulticastLocator* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShmMulticastLocator>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShmMulticastLocator& from);
  void MergeFrom(const ShmMulticastLocator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShmMulticastLocator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ip = 1;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 2;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:xag_nav.os.proto.ShmMulticastLocator)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::uint32 port_;
  friend struct ::TableStruct_transport_5fconf_2eproto;
};
// -------------------------------------------------------------------

class ShmConf final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xag_nav.os.proto.ShmConf) */ {
 public:
  ShmConf();
  virtual ~ShmConf();

  ShmConf(const ShmConf& from);

  inline ShmConf& operator=(const ShmConf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShmConf(ShmConf&& from) noexcept
    : ShmConf() {
    *this = ::std::move(from);
  }

  inline ShmConf& operator=(ShmConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ShmConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShmConf* internal_default_instance() {
    return reinterpret_cast<const ShmConf*>(
               &_ShmConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ShmConf* other);
  friend void swap(ShmConf& a, ShmConf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShmConf* New() const final {
    return CreateMaybeMessage<ShmConf>(nullptr);
  }

  ShmConf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShmConf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShmConf& from);
  void MergeFrom(const ShmConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShmConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string notifier_type = 1;
  bool has_notifier_type() const;
  void clear_notifier_type();
  static const int kNotifierTypeFieldNumber = 1;
  const ::std::string& notifier_type() const;
  void set_notifier_type(const ::std::string& value);
  #if LANG_CXX11
  void set_notifier_type(::std::string&& value);
  #endif
  void set_notifier_type(const char* value);
  void set_notifier_type(const char* value, size_t size);
  ::std::string* mutable_notifier_type();
  ::std::string* release_notifier_type();
  void set_allocated_notifier_type(::std::string* notifier_type);

  // optional string shm_type = 2;
  bool has_shm_type() const;
  void clear_shm_type();
  static const int kShmTypeFieldNumber = 2;
  const ::std::string& shm_type() const;
  void set_shm_type(const ::std::string& value);
  #if LANG_CXX11
  void set_shm_type(::std::string&& value);
  #endif
  void set_shm_type(const char* value);
  void set_shm_type(const char* value, size_t size);
  ::std::string* mutable_shm_type();
  ::std::string* release_shm_type();
  void set_allocated_shm_type(::std::string* shm_type);

  // optional .xag_nav.os.proto.ShmMulticastLocator shm_locator = 3;
  bool has_shm_locator() const;
  void clear_shm_locator();
  static const int kShmLocatorFieldNumber = 3;
  const ::xag_nav::os::proto::ShmMulticastLocator& shm_locator() const;
  ::xag_nav::os::proto::ShmMulticastLocator* release_shm_locator();
  ::xag_nav::os::proto::ShmMulticastLocator* mutable_shm_locator();
  void set_allocated_shm_locator(::xag_nav::os::proto::ShmMulticastLocator* shm_locator);

  // @@protoc_insertion_point(class_scope:xag_nav.os.proto.ShmConf)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr notifier_type_;
  ::google::protobuf::internal::ArenaStringPtr shm_type_;
  ::xag_nav::os::proto::ShmMulticastLocator* shm_locator_;
  friend struct ::TableStruct_transport_5fconf_2eproto;
};
// -------------------------------------------------------------------

class CommunicationMode final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xag_nav.os.proto.CommunicationMode) */ {
 public:
  CommunicationMode();
  virtual ~CommunicationMode();

  CommunicationMode(const CommunicationMode& from);

  inline CommunicationMode& operator=(const CommunicationMode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommunicationMode(CommunicationMode&& from) noexcept
    : CommunicationMode() {
    *this = ::std::move(from);
  }

  inline CommunicationMode& operator=(CommunicationMode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CommunicationMode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommunicationMode* internal_default_instance() {
    return reinterpret_cast<const CommunicationMode*>(
               &_CommunicationMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CommunicationMode* other);
  friend void swap(CommunicationMode& a, CommunicationMode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommunicationMode* New() const final {
    return CreateMaybeMessage<CommunicationMode>(nullptr);
  }

  CommunicationMode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommunicationMode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommunicationMode& from);
  void MergeFrom(const CommunicationMode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommunicationMode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .xag_nav.os.proto.OptionalMode same_proc = 1 [default = INTRA];
  bool has_same_proc() const;
  void clear_same_proc();
  static const int kSameProcFieldNumber = 1;
  ::xag_nav::os::proto::OptionalMode same_proc() const;
  void set_same_proc(::xag_nav::os::proto::OptionalMode value);

  // optional .xag_nav.os.proto.OptionalMode diff_proc = 2 [default = SHM];
  bool has_diff_proc() const;
  void clear_diff_proc();
  static const int kDiffProcFieldNumber = 2;
  ::xag_nav::os::proto::OptionalMode diff_proc() const;
  void set_diff_proc(::xag_nav::os::proto::OptionalMode value);

  // @@protoc_insertion_point(class_scope:xag_nav.os.proto.CommunicationMode)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int same_proc_;
  int diff_proc_;
  friend struct ::TableStruct_transport_5fconf_2eproto;
};
// -------------------------------------------------------------------

class TransportConf final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xag_nav.os.proto.TransportConf) */ {
 public:
  TransportConf();
  virtual ~TransportConf();

  TransportConf(const TransportConf& from);

  inline TransportConf& operator=(const TransportConf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransportConf(TransportConf&& from) noexcept
    : TransportConf() {
    *this = ::std::move(from);
  }

  inline TransportConf& operator=(TransportConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TransportConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransportConf* internal_default_instance() {
    return reinterpret_cast<const TransportConf*>(
               &_TransportConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TransportConf* other);
  friend void swap(TransportConf& a, TransportConf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransportConf* New() const final {
    return CreateMaybeMessage<TransportConf>(nullptr);
  }

  TransportConf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransportConf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TransportConf& from);
  void MergeFrom(const TransportConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .xag_nav.os.proto.ShmConf shm_conf = 1;
  bool has_shm_conf() const;
  void clear_shm_conf();
  static const int kShmConfFieldNumber = 1;
  const ::xag_nav::os::proto::ShmConf& shm_conf() const;
  ::xag_nav::os::proto::ShmConf* release_shm_conf();
  ::xag_nav::os::proto::ShmConf* mutable_shm_conf();
  void set_allocated_shm_conf(::xag_nav::os::proto::ShmConf* shm_conf);

  // optional .xag_nav.os.proto.CommunicationMode communication_mode = 2;
  bool has_communication_mode() const;
  void clear_communication_mode();
  static const int kCommunicationModeFieldNumber = 2;
  const ::xag_nav::os::proto::CommunicationMode& communication_mode() const;
  ::xag_nav::os::proto::CommunicationMode* release_communication_mode();
  ::xag_nav::os::proto::CommunicationMode* mutable_communication_mode();
  void set_allocated_communication_mode(::xag_nav::os::proto::CommunicationMode* communication_mode);

  // @@protoc_insertion_point(class_scope:xag_nav.os.proto.TransportConf)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::xag_nav::os::proto::ShmConf* shm_conf_;
  ::xag_nav::os::proto::CommunicationMode* communication_mode_;
  friend struct ::TableStruct_transport_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ShmMulticastLocator

// optional string ip = 1;
inline bool ShmMulticastLocator::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShmMulticastLocator::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ShmMulticastLocator::ip() const {
  // @@protoc_insertion_point(field_get:xag_nav.os.proto.ShmMulticastLocator.ip)
  return ip_.GetNoArena();
}
inline void ShmMulticastLocator::set_ip(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xag_nav.os.proto.ShmMulticastLocator.ip)
}
#if LANG_CXX11
inline void ShmMulticastLocator::set_ip(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xag_nav.os.proto.ShmMulticastLocator.ip)
}
#endif
inline void ShmMulticastLocator::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xag_nav.os.proto.ShmMulticastLocator.ip)
}
inline void ShmMulticastLocator::set_ip(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xag_nav.os.proto.ShmMulticastLocator.ip)
}
inline ::std::string* ShmMulticastLocator::mutable_ip() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:xag_nav.os.proto.ShmMulticastLocator.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShmMulticastLocator::release_ip() {
  // @@protoc_insertion_point(field_release:xag_nav.os.proto.ShmMulticastLocator.ip)
  if (!has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShmMulticastLocator::set_allocated_ip(::std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:xag_nav.os.proto.ShmMulticastLocator.ip)
}

// optional uint32 port = 2;
inline bool ShmMulticastLocator::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShmMulticastLocator::clear_port() {
  port_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 ShmMulticastLocator::port() const {
  // @@protoc_insertion_point(field_get:xag_nav.os.proto.ShmMulticastLocator.port)
  return port_;
}
inline void ShmMulticastLocator::set_port(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  port_ = value;
  // @@protoc_insertion_point(field_set:xag_nav.os.proto.ShmMulticastLocator.port)
}

// -------------------------------------------------------------------

// ShmConf

// optional string notifier_type = 1;
inline bool ShmConf::has_notifier_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShmConf::clear_notifier_type() {
  notifier_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ShmConf::notifier_type() const {
  // @@protoc_insertion_point(field_get:xag_nav.os.proto.ShmConf.notifier_type)
  return notifier_type_.GetNoArena();
}
inline void ShmConf::set_notifier_type(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  notifier_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xag_nav.os.proto.ShmConf.notifier_type)
}
#if LANG_CXX11
inline void ShmConf::set_notifier_type(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  notifier_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xag_nav.os.proto.ShmConf.notifier_type)
}
#endif
inline void ShmConf::set_notifier_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  notifier_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xag_nav.os.proto.ShmConf.notifier_type)
}
inline void ShmConf::set_notifier_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  notifier_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xag_nav.os.proto.ShmConf.notifier_type)
}
inline ::std::string* ShmConf::mutable_notifier_type() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:xag_nav.os.proto.ShmConf.notifier_type)
  return notifier_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShmConf::release_notifier_type() {
  // @@protoc_insertion_point(field_release:xag_nav.os.proto.ShmConf.notifier_type)
  if (!has_notifier_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return notifier_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShmConf::set_allocated_notifier_type(::std::string* notifier_type) {
  if (notifier_type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  notifier_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), notifier_type);
  // @@protoc_insertion_point(field_set_allocated:xag_nav.os.proto.ShmConf.notifier_type)
}

// optional string shm_type = 2;
inline bool ShmConf::has_shm_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShmConf::clear_shm_type() {
  shm_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& ShmConf::shm_type() const {
  // @@protoc_insertion_point(field_get:xag_nav.os.proto.ShmConf.shm_type)
  return shm_type_.GetNoArena();
}
inline void ShmConf::set_shm_type(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  shm_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xag_nav.os.proto.ShmConf.shm_type)
}
#if LANG_CXX11
inline void ShmConf::set_shm_type(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  shm_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xag_nav.os.proto.ShmConf.shm_type)
}
#endif
inline void ShmConf::set_shm_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  shm_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xag_nav.os.proto.ShmConf.shm_type)
}
inline void ShmConf::set_shm_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  shm_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xag_nav.os.proto.ShmConf.shm_type)
}
inline ::std::string* ShmConf::mutable_shm_type() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:xag_nav.os.proto.ShmConf.shm_type)
  return shm_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShmConf::release_shm_type() {
  // @@protoc_insertion_point(field_release:xag_nav.os.proto.ShmConf.shm_type)
  if (!has_shm_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return shm_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShmConf::set_allocated_shm_type(::std::string* shm_type) {
  if (shm_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  shm_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shm_type);
  // @@protoc_insertion_point(field_set_allocated:xag_nav.os.proto.ShmConf.shm_type)
}

// optional .xag_nav.os.proto.ShmMulticastLocator shm_locator = 3;
inline bool ShmConf::has_shm_locator() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShmConf::clear_shm_locator() {
  if (shm_locator_ != nullptr) shm_locator_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::xag_nav::os::proto::ShmMulticastLocator& ShmConf::shm_locator() const {
  const ::xag_nav::os::proto::ShmMulticastLocator* p = shm_locator_;
  // @@protoc_insertion_point(field_get:xag_nav.os.proto.ShmConf.shm_locator)
  return p != nullptr ? *p : *reinterpret_cast<const ::xag_nav::os::proto::ShmMulticastLocator*>(
      &::xag_nav::os::proto::_ShmMulticastLocator_default_instance_);
}
inline ::xag_nav::os::proto::ShmMulticastLocator* ShmConf::release_shm_locator() {
  // @@protoc_insertion_point(field_release:xag_nav.os.proto.ShmConf.shm_locator)
  _has_bits_[0] &= ~0x00000004u;
  ::xag_nav::os::proto::ShmMulticastLocator* temp = shm_locator_;
  shm_locator_ = nullptr;
  return temp;
}
inline ::xag_nav::os::proto::ShmMulticastLocator* ShmConf::mutable_shm_locator() {
  _has_bits_[0] |= 0x00000004u;
  if (shm_locator_ == nullptr) {
    auto* p = CreateMaybeMessage<::xag_nav::os::proto::ShmMulticastLocator>(GetArenaNoVirtual());
    shm_locator_ = p;
  }
  // @@protoc_insertion_point(field_mutable:xag_nav.os.proto.ShmConf.shm_locator)
  return shm_locator_;
}
inline void ShmConf::set_allocated_shm_locator(::xag_nav::os::proto::ShmMulticastLocator* shm_locator) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete shm_locator_;
  }
  if (shm_locator) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      shm_locator = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shm_locator, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  shm_locator_ = shm_locator;
  // @@protoc_insertion_point(field_set_allocated:xag_nav.os.proto.ShmConf.shm_locator)
}

// -------------------------------------------------------------------

// CommunicationMode

// optional .xag_nav.os.proto.OptionalMode same_proc = 1 [default = INTRA];
inline bool CommunicationMode::has_same_proc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommunicationMode::clear_same_proc() {
  same_proc_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::xag_nav::os::proto::OptionalMode CommunicationMode::same_proc() const {
  // @@protoc_insertion_point(field_get:xag_nav.os.proto.CommunicationMode.same_proc)
  return static_cast< ::xag_nav::os::proto::OptionalMode >(same_proc_);
}
inline void CommunicationMode::set_same_proc(::xag_nav::os::proto::OptionalMode value) {
  assert(::xag_nav::os::proto::OptionalMode_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  same_proc_ = value;
  // @@protoc_insertion_point(field_set:xag_nav.os.proto.CommunicationMode.same_proc)
}

// optional .xag_nav.os.proto.OptionalMode diff_proc = 2 [default = SHM];
inline bool CommunicationMode::has_diff_proc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommunicationMode::clear_diff_proc() {
  diff_proc_ = 2;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::xag_nav::os::proto::OptionalMode CommunicationMode::diff_proc() const {
  // @@protoc_insertion_point(field_get:xag_nav.os.proto.CommunicationMode.diff_proc)
  return static_cast< ::xag_nav::os::proto::OptionalMode >(diff_proc_);
}
inline void CommunicationMode::set_diff_proc(::xag_nav::os::proto::OptionalMode value) {
  assert(::xag_nav::os::proto::OptionalMode_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  diff_proc_ = value;
  // @@protoc_insertion_point(field_set:xag_nav.os.proto.CommunicationMode.diff_proc)
}

// -------------------------------------------------------------------

// TransportConf

// optional .xag_nav.os.proto.ShmConf shm_conf = 1;
inline bool TransportConf::has_shm_conf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransportConf::clear_shm_conf() {
  if (shm_conf_ != nullptr) shm_conf_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::xag_nav::os::proto::ShmConf& TransportConf::shm_conf() const {
  const ::xag_nav::os::proto::ShmConf* p = shm_conf_;
  // @@protoc_insertion_point(field_get:xag_nav.os.proto.TransportConf.shm_conf)
  return p != nullptr ? *p : *reinterpret_cast<const ::xag_nav::os::proto::ShmConf*>(
      &::xag_nav::os::proto::_ShmConf_default_instance_);
}
inline ::xag_nav::os::proto::ShmConf* TransportConf::release_shm_conf() {
  // @@protoc_insertion_point(field_release:xag_nav.os.proto.TransportConf.shm_conf)
  _has_bits_[0] &= ~0x00000001u;
  ::xag_nav::os::proto::ShmConf* temp = shm_conf_;
  shm_conf_ = nullptr;
  return temp;
}
inline ::xag_nav::os::proto::ShmConf* TransportConf::mutable_shm_conf() {
  _has_bits_[0] |= 0x00000001u;
  if (shm_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::xag_nav::os::proto::ShmConf>(GetArenaNoVirtual());
    shm_conf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:xag_nav.os.proto.TransportConf.shm_conf)
  return shm_conf_;
}
inline void TransportConf::set_allocated_shm_conf(::xag_nav::os::proto::ShmConf* shm_conf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete shm_conf_;
  }
  if (shm_conf) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      shm_conf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shm_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  shm_conf_ = shm_conf;
  // @@protoc_insertion_point(field_set_allocated:xag_nav.os.proto.TransportConf.shm_conf)
}

// optional .xag_nav.os.proto.CommunicationMode communication_mode = 2;
inline bool TransportConf::has_communication_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransportConf::clear_communication_mode() {
  if (communication_mode_ != nullptr) communication_mode_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::xag_nav::os::proto::CommunicationMode& TransportConf::communication_mode() const {
  const ::xag_nav::os::proto::CommunicationMode* p = communication_mode_;
  // @@protoc_insertion_point(field_get:xag_nav.os.proto.TransportConf.communication_mode)
  return p != nullptr ? *p : *reinterpret_cast<const ::xag_nav::os::proto::CommunicationMode*>(
      &::xag_nav::os::proto::_CommunicationMode_default_instance_);
}
inline ::xag_nav::os::proto::CommunicationMode* TransportConf::release_communication_mode() {
  // @@protoc_insertion_point(field_release:xag_nav.os.proto.TransportConf.communication_mode)
  _has_bits_[0] &= ~0x00000002u;
  ::xag_nav::os::proto::CommunicationMode* temp = communication_mode_;
  communication_mode_ = nullptr;
  return temp;
}
inline ::xag_nav::os::proto::CommunicationMode* TransportConf::mutable_communication_mode() {
  _has_bits_[0] |= 0x00000002u;
  if (communication_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::xag_nav::os::proto::CommunicationMode>(GetArenaNoVirtual());
    communication_mode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:xag_nav.os.proto.TransportConf.communication_mode)
  return communication_mode_;
}
inline void TransportConf::set_allocated_communication_mode(::xag_nav::os::proto::CommunicationMode* communication_mode) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete communication_mode_;
  }
  if (communication_mode) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      communication_mode = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, communication_mode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  communication_mode_ = communication_mode;
  // @@protoc_insertion_point(field_set_allocated:xag_nav.os.proto.TransportConf.communication_mode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace os
}  // namespace xag_nav

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::xag_nav::os::proto::OptionalMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xag_nav::os::proto::OptionalMode>() {
  return ::xag_nav::os::proto::OptionalMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_transport_5fconf_2eproto
