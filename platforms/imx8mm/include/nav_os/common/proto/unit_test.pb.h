// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: unit_test.proto

#ifndef PROTOBUF_INCLUDED_unit_5ftest_2eproto
#define PROTOBUF_INCLUDED_unit_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_unit_5ftest_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_unit_5ftest_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_unit_5ftest_2eproto();
namespace xag_nav {
namespace os {
namespace proto {
class Chatter;
class ChatterDefaultTypeInternal;
extern ChatterDefaultTypeInternal _Chatter_default_instance_;
class ChatterBenchmark;
class ChatterBenchmarkDefaultTypeInternal;
extern ChatterBenchmarkDefaultTypeInternal _ChatterBenchmark_default_instance_;
class UnitTest;
class UnitTestDefaultTypeInternal;
extern UnitTestDefaultTypeInternal _UnitTest_default_instance_;
}  // namespace proto
}  // namespace os
}  // namespace xag_nav
namespace google {
namespace protobuf {
template<> ::xag_nav::os::proto::Chatter* Arena::CreateMaybeMessage<::xag_nav::os::proto::Chatter>(Arena*);
template<> ::xag_nav::os::proto::ChatterBenchmark* Arena::CreateMaybeMessage<::xag_nav::os::proto::ChatterBenchmark>(Arena*);
template<> ::xag_nav::os::proto::UnitTest* Arena::CreateMaybeMessage<::xag_nav::os::proto::UnitTest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace xag_nav {
namespace os {
namespace proto {

// ===================================================================

class UnitTest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xag_nav.os.proto.UnitTest) */ {
 public:
  UnitTest();
  virtual ~UnitTest();

  UnitTest(const UnitTest& from);

  inline UnitTest& operator=(const UnitTest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnitTest(UnitTest&& from) noexcept
    : UnitTest() {
    *this = ::std::move(from);
  }

  inline UnitTest& operator=(UnitTest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UnitTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnitTest* internal_default_instance() {
    return reinterpret_cast<const UnitTest*>(
               &_UnitTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(UnitTest* other);
  friend void swap(UnitTest& a, UnitTest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnitTest* New() const final {
    return CreateMaybeMessage<UnitTest>(nullptr);
  }

  UnitTest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UnitTest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UnitTest& from);
  void MergeFrom(const UnitTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnitTest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string class_name = 1;
  bool has_class_name() const;
  void clear_class_name();
  static const int kClassNameFieldNumber = 1;
  const ::std::string& class_name() const;
  void set_class_name(const ::std::string& value);
  #if LANG_CXX11
  void set_class_name(::std::string&& value);
  #endif
  void set_class_name(const char* value);
  void set_class_name(const char* value, size_t size);
  ::std::string* mutable_class_name();
  ::std::string* release_class_name();
  void set_allocated_class_name(::std::string* class_name);

  // optional string case_name = 2;
  bool has_case_name() const;
  void clear_case_name();
  static const int kCaseNameFieldNumber = 2;
  const ::std::string& case_name() const;
  void set_case_name(const ::std::string& value);
  #if LANG_CXX11
  void set_case_name(::std::string&& value);
  #endif
  void set_case_name(const char* value);
  void set_case_name(const char* value, size_t size);
  ::std::string* mutable_case_name();
  ::std::string* release_case_name();
  void set_allocated_case_name(::std::string* case_name);

  // @@protoc_insertion_point(class_scope:xag_nav.os.proto.UnitTest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr class_name_;
  ::google::protobuf::internal::ArenaStringPtr case_name_;
  friend struct ::TableStruct_unit_5ftest_2eproto;
};
// -------------------------------------------------------------------

class Chatter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xag_nav.os.proto.Chatter) */ {
 public:
  Chatter();
  virtual ~Chatter();

  Chatter(const Chatter& from);

  inline Chatter& operator=(const Chatter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Chatter(Chatter&& from) noexcept
    : Chatter() {
    *this = ::std::move(from);
  }

  inline Chatter& operator=(Chatter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Chatter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Chatter* internal_default_instance() {
    return reinterpret_cast<const Chatter*>(
               &_Chatter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Chatter* other);
  friend void swap(Chatter& a, Chatter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Chatter* New() const final {
    return CreateMaybeMessage<Chatter>(nullptr);
  }

  Chatter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Chatter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Chatter& from);
  void MergeFrom(const Chatter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chatter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes content = 4;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 4;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // optional uint64 timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // optional uint64 lidar_timestamp = 2;
  bool has_lidar_timestamp() const;
  void clear_lidar_timestamp();
  static const int kLidarTimestampFieldNumber = 2;
  ::google::protobuf::uint64 lidar_timestamp() const;
  void set_lidar_timestamp(::google::protobuf::uint64 value);

  // optional uint64 seq = 3;
  bool has_seq() const;
  void clear_seq();
  static const int kSeqFieldNumber = 3;
  ::google::protobuf::uint64 seq() const;
  void set_seq(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:xag_nav.os.proto.Chatter)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::uint64 lidar_timestamp_;
  ::google::protobuf::uint64 seq_;
  friend struct ::TableStruct_unit_5ftest_2eproto;
};
// -------------------------------------------------------------------

class ChatterBenchmark final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xag_nav.os.proto.ChatterBenchmark) */ {
 public:
  ChatterBenchmark();
  virtual ~ChatterBenchmark();

  ChatterBenchmark(const ChatterBenchmark& from);

  inline ChatterBenchmark& operator=(const ChatterBenchmark& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatterBenchmark(ChatterBenchmark&& from) noexcept
    : ChatterBenchmark() {
    *this = ::std::move(from);
  }

  inline ChatterBenchmark& operator=(ChatterBenchmark&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ChatterBenchmark& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatterBenchmark* internal_default_instance() {
    return reinterpret_cast<const ChatterBenchmark*>(
               &_ChatterBenchmark_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ChatterBenchmark* other);
  friend void swap(ChatterBenchmark& a, ChatterBenchmark& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatterBenchmark* New() const final {
    return CreateMaybeMessage<ChatterBenchmark>(nullptr);
  }

  ChatterBenchmark* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChatterBenchmark>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChatterBenchmark& from);
  void MergeFrom(const ChatterBenchmark& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatterBenchmark* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string content = 3;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 3;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // optional uint64 stamp = 1;
  bool has_stamp() const;
  void clear_stamp();
  static const int kStampFieldNumber = 1;
  ::google::protobuf::uint64 stamp() const;
  void set_stamp(::google::protobuf::uint64 value);

  // optional uint64 seq = 2;
  bool has_seq() const;
  void clear_seq();
  static const int kSeqFieldNumber = 2;
  ::google::protobuf::uint64 seq() const;
  void set_seq(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:xag_nav.os.proto.ChatterBenchmark)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::uint64 stamp_;
  ::google::protobuf::uint64 seq_;
  friend struct ::TableStruct_unit_5ftest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UnitTest

// optional string class_name = 1;
inline bool UnitTest::has_class_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnitTest::clear_class_name() {
  class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& UnitTest::class_name() const {
  // @@protoc_insertion_point(field_get:xag_nav.os.proto.UnitTest.class_name)
  return class_name_.GetNoArena();
}
inline void UnitTest::set_class_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xag_nav.os.proto.UnitTest.class_name)
}
#if LANG_CXX11
inline void UnitTest::set_class_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  class_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xag_nav.os.proto.UnitTest.class_name)
}
#endif
inline void UnitTest::set_class_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xag_nav.os.proto.UnitTest.class_name)
}
inline void UnitTest::set_class_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xag_nav.os.proto.UnitTest.class_name)
}
inline ::std::string* UnitTest::mutable_class_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:xag_nav.os.proto.UnitTest.class_name)
  return class_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnitTest::release_class_name() {
  // @@protoc_insertion_point(field_release:xag_nav.os.proto.UnitTest.class_name)
  if (!has_class_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return class_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnitTest::set_allocated_class_name(::std::string* class_name) {
  if (class_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  class_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), class_name);
  // @@protoc_insertion_point(field_set_allocated:xag_nav.os.proto.UnitTest.class_name)
}

// optional string case_name = 2;
inline bool UnitTest::has_case_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnitTest::clear_case_name() {
  case_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& UnitTest::case_name() const {
  // @@protoc_insertion_point(field_get:xag_nav.os.proto.UnitTest.case_name)
  return case_name_.GetNoArena();
}
inline void UnitTest::set_case_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  case_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xag_nav.os.proto.UnitTest.case_name)
}
#if LANG_CXX11
inline void UnitTest::set_case_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  case_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xag_nav.os.proto.UnitTest.case_name)
}
#endif
inline void UnitTest::set_case_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  case_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xag_nav.os.proto.UnitTest.case_name)
}
inline void UnitTest::set_case_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  case_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xag_nav.os.proto.UnitTest.case_name)
}
inline ::std::string* UnitTest::mutable_case_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:xag_nav.os.proto.UnitTest.case_name)
  return case_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnitTest::release_case_name() {
  // @@protoc_insertion_point(field_release:xag_nav.os.proto.UnitTest.case_name)
  if (!has_case_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return case_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnitTest::set_allocated_case_name(::std::string* case_name) {
  if (case_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  case_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), case_name);
  // @@protoc_insertion_point(field_set_allocated:xag_nav.os.proto.UnitTest.case_name)
}

// -------------------------------------------------------------------

// Chatter

// optional uint64 timestamp = 1;
inline bool Chatter::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Chatter::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 Chatter::timestamp() const {
  // @@protoc_insertion_point(field_get:xag_nav.os.proto.Chatter.timestamp)
  return timestamp_;
}
inline void Chatter::set_timestamp(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:xag_nav.os.proto.Chatter.timestamp)
}

// optional uint64 lidar_timestamp = 2;
inline bool Chatter::has_lidar_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Chatter::clear_lidar_timestamp() {
  lidar_timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 Chatter::lidar_timestamp() const {
  // @@protoc_insertion_point(field_get:xag_nav.os.proto.Chatter.lidar_timestamp)
  return lidar_timestamp_;
}
inline void Chatter::set_lidar_timestamp(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  lidar_timestamp_ = value;
  // @@protoc_insertion_point(field_set:xag_nav.os.proto.Chatter.lidar_timestamp)
}

// optional uint64 seq = 3;
inline bool Chatter::has_seq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Chatter::clear_seq() {
  seq_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint64 Chatter::seq() const {
  // @@protoc_insertion_point(field_get:xag_nav.os.proto.Chatter.seq)
  return seq_;
}
inline void Chatter::set_seq(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  seq_ = value;
  // @@protoc_insertion_point(field_set:xag_nav.os.proto.Chatter.seq)
}

// optional bytes content = 4;
inline bool Chatter::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chatter::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& Chatter::content() const {
  // @@protoc_insertion_point(field_get:xag_nav.os.proto.Chatter.content)
  return content_.GetNoArena();
}
inline void Chatter::set_content(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xag_nav.os.proto.Chatter.content)
}
#if LANG_CXX11
inline void Chatter::set_content(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xag_nav.os.proto.Chatter.content)
}
#endif
inline void Chatter::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xag_nav.os.proto.Chatter.content)
}
inline void Chatter::set_content(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xag_nav.os.proto.Chatter.content)
}
inline ::std::string* Chatter::mutable_content() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:xag_nav.os.proto.Chatter.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Chatter::release_content() {
  // @@protoc_insertion_point(field_release:xag_nav.os.proto.Chatter.content)
  if (!has_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return content_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Chatter::set_allocated_content(::std::string* content) {
  if (content != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:xag_nav.os.proto.Chatter.content)
}

// -------------------------------------------------------------------

// ChatterBenchmark

// optional uint64 stamp = 1;
inline bool ChatterBenchmark::has_stamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatterBenchmark::clear_stamp() {
  stamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 ChatterBenchmark::stamp() const {
  // @@protoc_insertion_point(field_get:xag_nav.os.proto.ChatterBenchmark.stamp)
  return stamp_;
}
inline void ChatterBenchmark::set_stamp(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  stamp_ = value;
  // @@protoc_insertion_point(field_set:xag_nav.os.proto.ChatterBenchmark.stamp)
}

// optional uint64 seq = 2;
inline bool ChatterBenchmark::has_seq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatterBenchmark::clear_seq() {
  seq_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 ChatterBenchmark::seq() const {
  // @@protoc_insertion_point(field_get:xag_nav.os.proto.ChatterBenchmark.seq)
  return seq_;
}
inline void ChatterBenchmark::set_seq(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  seq_ = value;
  // @@protoc_insertion_point(field_set:xag_nav.os.proto.ChatterBenchmark.seq)
}

// optional string content = 3;
inline bool ChatterBenchmark::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatterBenchmark::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ChatterBenchmark::content() const {
  // @@protoc_insertion_point(field_get:xag_nav.os.proto.ChatterBenchmark.content)
  return content_.GetNoArena();
}
inline void ChatterBenchmark::set_content(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xag_nav.os.proto.ChatterBenchmark.content)
}
#if LANG_CXX11
inline void ChatterBenchmark::set_content(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xag_nav.os.proto.ChatterBenchmark.content)
}
#endif
inline void ChatterBenchmark::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xag_nav.os.proto.ChatterBenchmark.content)
}
inline void ChatterBenchmark::set_content(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xag_nav.os.proto.ChatterBenchmark.content)
}
inline ::std::string* ChatterBenchmark::mutable_content() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:xag_nav.os.proto.ChatterBenchmark.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatterBenchmark::release_content() {
  // @@protoc_insertion_point(field_release:xag_nav.os.proto.ChatterBenchmark.content)
  if (!has_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return content_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatterBenchmark::set_allocated_content(::std::string* content) {
  if (content != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:xag_nav.os.proto.ChatterBenchmark.content)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace os
}  // namespace xag_nav

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_unit_5ftest_2eproto
