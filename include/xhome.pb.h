// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xhome.proto

#ifndef PROTOBUF_INCLUDED_xhome_2eproto
#define PROTOBUF_INCLUDED_xhome_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_xhome_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_xhome_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_xhome_2eproto();
namespace xhome {
class Conditions;
class ConditionsDefaultTypeInternal;
extern ConditionsDefaultTypeInternal _Conditions_default_instance_;
class Mission;
class MissionDefaultTypeInternal;
extern MissionDefaultTypeInternal _Mission_default_instance_;
}  // namespace xhome
namespace google {
namespace protobuf {
template<> ::xhome::Conditions* Arena::CreateMaybeMessage<::xhome::Conditions>(Arena*);
template<> ::xhome::Mission* Arena::CreateMaybeMessage<::xhome::Mission>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace xhome {

// ===================================================================

class Conditions final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xhome.Conditions) */ {
 public:
  Conditions();
  virtual ~Conditions();

  Conditions(const Conditions& from);

  inline Conditions& operator=(const Conditions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Conditions(Conditions&& from) noexcept
    : Conditions() {
    *this = ::std::move(from);
  }

  inline Conditions& operator=(Conditions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Conditions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Conditions* internal_default_instance() {
    return reinterpret_cast<const Conditions*>(
               &_Conditions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Conditions* other);
  friend void swap(Conditions& a, Conditions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Conditions* New() const final {
    return CreateMaybeMessage<Conditions>(nullptr);
  }

  Conditions* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Conditions>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Conditions& from);
  void MergeFrom(const Conditions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Conditions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string text = 4;
  void clear_text();
  static const int kTextFieldNumber = 4;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // string unit = 5;
  void clear_unit();
  static const int kUnitFieldNumber = 5;
  const ::std::string& unit() const;
  void set_unit(const ::std::string& value);
  #if LANG_CXX11
  void set_unit(::std::string&& value);
  #endif
  void set_unit(const char* value);
  void set_unit(const char* value, size_t size);
  ::std::string* mutable_unit();
  ::std::string* release_unit();
  void set_allocated_unit(::std::string* unit);

  // float max = 2;
  void clear_max();
  static const int kMaxFieldNumber = 2;
  float max() const;
  void set_max(float value);

  // float min = 3;
  void clear_min();
  static const int kMinFieldNumber = 3;
  float min() const;
  void set_min(float value);

  // @@protoc_insertion_point(class_scope:xhome.Conditions)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::internal::ArenaStringPtr unit_;
  float max_;
  float min_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xhome_2eproto;
};
// -------------------------------------------------------------------

class Mission final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xhome.Mission) */ {
 public:
  Mission();
  virtual ~Mission();

  Mission(const Mission& from);

  inline Mission& operator=(const Mission& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mission(Mission&& from) noexcept
    : Mission() {
    *this = ::std::move(from);
  }

  inline Mission& operator=(Mission&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Mission& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mission* internal_default_instance() {
    return reinterpret_cast<const Mission*>(
               &_Mission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Mission* other);
  friend void swap(Mission& a, Mission& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mission* New() const final {
    return CreateMaybeMessage<Mission>(nullptr);
  }

  Mission* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mission>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mission& from);
  void MergeFrom(const Mission& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mission* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .xhome.Conditions conditions = 10;
  int conditions_size() const;
  void clear_conditions();
  static const int kConditionsFieldNumber = 10;
  ::xhome::Conditions* mutable_conditions(int index);
  ::google::protobuf::RepeatedPtrField< ::xhome::Conditions >*
      mutable_conditions();
  const ::xhome::Conditions& conditions(int index) const;
  ::xhome::Conditions* add_conditions();
  const ::google::protobuf::RepeatedPtrField< ::xhome::Conditions >&
      conditions() const;

  // bytes mission_id = 4;
  void clear_mission_id();
  static const int kMissionIdFieldNumber = 4;
  const ::std::string& mission_id() const;
  void set_mission_id(const ::std::string& value);
  #if LANG_CXX11
  void set_mission_id(::std::string&& value);
  #endif
  void set_mission_id(const char* value);
  void set_mission_id(const void* value, size_t size);
  ::std::string* mutable_mission_id();
  ::std::string* release_mission_id();
  void set_allocated_mission_id(::std::string* mission_id);

  // bytes file_name = 7;
  void clear_file_name();
  static const int kFileNameFieldNumber = 7;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_file_name(::std::string&& value);
  #endif
  void set_file_name(const char* value);
  void set_file_name(const void* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // bytes field_name = 9;
  void clear_field_name();
  static const int kFieldNameFieldNumber = 9;
  const ::std::string& field_name() const;
  void set_field_name(const ::std::string& value);
  #if LANG_CXX11
  void set_field_name(::std::string&& value);
  #endif
  void set_field_name(const char* value);
  void set_field_name(const void* value, size_t size);
  ::std::string* mutable_field_name();
  ::std::string* release_field_name();
  void set_allocated_field_name(::std::string* field_name);

  // int32 version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // int32 mission_type = 2;
  void clear_mission_type();
  static const int kMissionTypeFieldNumber = 2;
  ::google::protobuf::int32 mission_type() const;
  void set_mission_type(::google::protobuf::int32 value);

  // int32 mission_source = 3;
  void clear_mission_source();
  static const int kMissionSourceFieldNumber = 3;
  ::google::protobuf::int32 mission_source() const;
  void set_mission_source(::google::protobuf::int32 value);

  // int32 mission_timeout = 5;
  void clear_mission_timeout();
  static const int kMissionTimeoutFieldNumber = 5;
  ::google::protobuf::int32 mission_timeout() const;
  void set_mission_timeout(::google::protobuf::int32 value);

  // int32 file_name_length = 6;
  void clear_file_name_length();
  static const int kFileNameLengthFieldNumber = 6;
  ::google::protobuf::int32 file_name_length() const;
  void set_file_name_length(::google::protobuf::int32 value);

  // int32 field_name_length = 8;
  void clear_field_name_length();
  static const int kFieldNameLengthFieldNumber = 8;
  ::google::protobuf::int32 field_name_length() const;
  void set_field_name_length(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:xhome.Mission)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::xhome::Conditions > conditions_;
  ::google::protobuf::internal::ArenaStringPtr mission_id_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  ::google::protobuf::internal::ArenaStringPtr field_name_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 mission_type_;
  ::google::protobuf::int32 mission_source_;
  ::google::protobuf::int32 mission_timeout_;
  ::google::protobuf::int32 file_name_length_;
  ::google::protobuf::int32 field_name_length_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xhome_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Conditions

// string key = 1;
inline void Conditions::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Conditions::key() const {
  // @@protoc_insertion_point(field_get:xhome.Conditions.key)
  return key_.GetNoArena();
}
inline void Conditions::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xhome.Conditions.key)
}
#if LANG_CXX11
inline void Conditions::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xhome.Conditions.key)
}
#endif
inline void Conditions::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xhome.Conditions.key)
}
inline void Conditions::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xhome.Conditions.key)
}
inline ::std::string* Conditions::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:xhome.Conditions.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Conditions::release_key() {
  // @@protoc_insertion_point(field_release:xhome.Conditions.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Conditions::set_allocated_key(::std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:xhome.Conditions.key)
}

// float max = 2;
inline void Conditions::clear_max() {
  max_ = 0;
}
inline float Conditions::max() const {
  // @@protoc_insertion_point(field_get:xhome.Conditions.max)
  return max_;
}
inline void Conditions::set_max(float value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:xhome.Conditions.max)
}

// float min = 3;
inline void Conditions::clear_min() {
  min_ = 0;
}
inline float Conditions::min() const {
  // @@protoc_insertion_point(field_get:xhome.Conditions.min)
  return min_;
}
inline void Conditions::set_min(float value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:xhome.Conditions.min)
}

// string text = 4;
inline void Conditions::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Conditions::text() const {
  // @@protoc_insertion_point(field_get:xhome.Conditions.text)
  return text_.GetNoArena();
}
inline void Conditions::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xhome.Conditions.text)
}
#if LANG_CXX11
inline void Conditions::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xhome.Conditions.text)
}
#endif
inline void Conditions::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xhome.Conditions.text)
}
inline void Conditions::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xhome.Conditions.text)
}
inline ::std::string* Conditions::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:xhome.Conditions.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Conditions::release_text() {
  // @@protoc_insertion_point(field_release:xhome.Conditions.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Conditions::set_allocated_text(::std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:xhome.Conditions.text)
}

// string unit = 5;
inline void Conditions::clear_unit() {
  unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Conditions::unit() const {
  // @@protoc_insertion_point(field_get:xhome.Conditions.unit)
  return unit_.GetNoArena();
}
inline void Conditions::set_unit(const ::std::string& value) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xhome.Conditions.unit)
}
#if LANG_CXX11
inline void Conditions::set_unit(::std::string&& value) {
  
  unit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xhome.Conditions.unit)
}
#endif
inline void Conditions::set_unit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xhome.Conditions.unit)
}
inline void Conditions::set_unit(const char* value, size_t size) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xhome.Conditions.unit)
}
inline ::std::string* Conditions::mutable_unit() {
  
  // @@protoc_insertion_point(field_mutable:xhome.Conditions.unit)
  return unit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Conditions::release_unit() {
  // @@protoc_insertion_point(field_release:xhome.Conditions.unit)
  
  return unit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Conditions::set_allocated_unit(::std::string* unit) {
  if (unit != nullptr) {
    
  } else {
    
  }
  unit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unit);
  // @@protoc_insertion_point(field_set_allocated:xhome.Conditions.unit)
}

// -------------------------------------------------------------------

// Mission

// int32 version = 1;
inline void Mission::clear_version() {
  version_ = 0;
}
inline ::google::protobuf::int32 Mission::version() const {
  // @@protoc_insertion_point(field_get:xhome.Mission.version)
  return version_;
}
inline void Mission::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:xhome.Mission.version)
}

// int32 mission_type = 2;
inline void Mission::clear_mission_type() {
  mission_type_ = 0;
}
inline ::google::protobuf::int32 Mission::mission_type() const {
  // @@protoc_insertion_point(field_get:xhome.Mission.mission_type)
  return mission_type_;
}
inline void Mission::set_mission_type(::google::protobuf::int32 value) {
  
  mission_type_ = value;
  // @@protoc_insertion_point(field_set:xhome.Mission.mission_type)
}

// int32 mission_source = 3;
inline void Mission::clear_mission_source() {
  mission_source_ = 0;
}
inline ::google::protobuf::int32 Mission::mission_source() const {
  // @@protoc_insertion_point(field_get:xhome.Mission.mission_source)
  return mission_source_;
}
inline void Mission::set_mission_source(::google::protobuf::int32 value) {
  
  mission_source_ = value;
  // @@protoc_insertion_point(field_set:xhome.Mission.mission_source)
}

// bytes mission_id = 4;
inline void Mission::clear_mission_id() {
  mission_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mission::mission_id() const {
  // @@protoc_insertion_point(field_get:xhome.Mission.mission_id)
  return mission_id_.GetNoArena();
}
inline void Mission::set_mission_id(const ::std::string& value) {
  
  mission_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xhome.Mission.mission_id)
}
#if LANG_CXX11
inline void Mission::set_mission_id(::std::string&& value) {
  
  mission_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xhome.Mission.mission_id)
}
#endif
inline void Mission::set_mission_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mission_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xhome.Mission.mission_id)
}
inline void Mission::set_mission_id(const void* value, size_t size) {
  
  mission_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xhome.Mission.mission_id)
}
inline ::std::string* Mission::mutable_mission_id() {
  
  // @@protoc_insertion_point(field_mutable:xhome.Mission.mission_id)
  return mission_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mission::release_mission_id() {
  // @@protoc_insertion_point(field_release:xhome.Mission.mission_id)
  
  return mission_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mission::set_allocated_mission_id(::std::string* mission_id) {
  if (mission_id != nullptr) {
    
  } else {
    
  }
  mission_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mission_id);
  // @@protoc_insertion_point(field_set_allocated:xhome.Mission.mission_id)
}

// int32 mission_timeout = 5;
inline void Mission::clear_mission_timeout() {
  mission_timeout_ = 0;
}
inline ::google::protobuf::int32 Mission::mission_timeout() const {
  // @@protoc_insertion_point(field_get:xhome.Mission.mission_timeout)
  return mission_timeout_;
}
inline void Mission::set_mission_timeout(::google::protobuf::int32 value) {
  
  mission_timeout_ = value;
  // @@protoc_insertion_point(field_set:xhome.Mission.mission_timeout)
}

// int32 file_name_length = 6;
inline void Mission::clear_file_name_length() {
  file_name_length_ = 0;
}
inline ::google::protobuf::int32 Mission::file_name_length() const {
  // @@protoc_insertion_point(field_get:xhome.Mission.file_name_length)
  return file_name_length_;
}
inline void Mission::set_file_name_length(::google::protobuf::int32 value) {
  
  file_name_length_ = value;
  // @@protoc_insertion_point(field_set:xhome.Mission.file_name_length)
}

// bytes file_name = 7;
inline void Mission::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mission::file_name() const {
  // @@protoc_insertion_point(field_get:xhome.Mission.file_name)
  return file_name_.GetNoArena();
}
inline void Mission::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xhome.Mission.file_name)
}
#if LANG_CXX11
inline void Mission::set_file_name(::std::string&& value) {
  
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xhome.Mission.file_name)
}
#endif
inline void Mission::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xhome.Mission.file_name)
}
inline void Mission::set_file_name(const void* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xhome.Mission.file_name)
}
inline ::std::string* Mission::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:xhome.Mission.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mission::release_file_name() {
  // @@protoc_insertion_point(field_release:xhome.Mission.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mission::set_allocated_file_name(::std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:xhome.Mission.file_name)
}

// int32 field_name_length = 8;
inline void Mission::clear_field_name_length() {
  field_name_length_ = 0;
}
inline ::google::protobuf::int32 Mission::field_name_length() const {
  // @@protoc_insertion_point(field_get:xhome.Mission.field_name_length)
  return field_name_length_;
}
inline void Mission::set_field_name_length(::google::protobuf::int32 value) {
  
  field_name_length_ = value;
  // @@protoc_insertion_point(field_set:xhome.Mission.field_name_length)
}

// bytes field_name = 9;
inline void Mission::clear_field_name() {
  field_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mission::field_name() const {
  // @@protoc_insertion_point(field_get:xhome.Mission.field_name)
  return field_name_.GetNoArena();
}
inline void Mission::set_field_name(const ::std::string& value) {
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xhome.Mission.field_name)
}
#if LANG_CXX11
inline void Mission::set_field_name(::std::string&& value) {
  
  field_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xhome.Mission.field_name)
}
#endif
inline void Mission::set_field_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xhome.Mission.field_name)
}
inline void Mission::set_field_name(const void* value, size_t size) {
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xhome.Mission.field_name)
}
inline ::std::string* Mission::mutable_field_name() {
  
  // @@protoc_insertion_point(field_mutable:xhome.Mission.field_name)
  return field_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mission::release_field_name() {
  // @@protoc_insertion_point(field_release:xhome.Mission.field_name)
  
  return field_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mission::set_allocated_field_name(::std::string* field_name) {
  if (field_name != nullptr) {
    
  } else {
    
  }
  field_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field_name);
  // @@protoc_insertion_point(field_set_allocated:xhome.Mission.field_name)
}

// repeated .xhome.Conditions conditions = 10;
inline int Mission::conditions_size() const {
  return conditions_.size();
}
inline void Mission::clear_conditions() {
  conditions_.Clear();
}
inline ::xhome::Conditions* Mission::mutable_conditions(int index) {
  // @@protoc_insertion_point(field_mutable:xhome.Mission.conditions)
  return conditions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::xhome::Conditions >*
Mission::mutable_conditions() {
  // @@protoc_insertion_point(field_mutable_list:xhome.Mission.conditions)
  return &conditions_;
}
inline const ::xhome::Conditions& Mission::conditions(int index) const {
  // @@protoc_insertion_point(field_get:xhome.Mission.conditions)
  return conditions_.Get(index);
}
inline ::xhome::Conditions* Mission::add_conditions() {
  // @@protoc_insertion_point(field_add:xhome.Mission.conditions)
  return conditions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::xhome::Conditions >&
Mission::conditions() const {
  // @@protoc_insertion_point(field_list:xhome.Mission.conditions)
  return conditions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace xhome

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_xhome_2eproto
